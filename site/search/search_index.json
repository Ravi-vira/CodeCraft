{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\ude80 Full Stack Development: Zero to Hero","text":""},{"location":"#course-instructor","title":"\ud83d\udc68\u200d\ud83c\udfeb Course Instructor","text":"<p>Professor Smaranjit Ghose</p>"},{"location":"#course-overview","title":"\ud83d\udccb Course Overview","text":"<p>This intensive course takes you from zero programming knowledge to building full-stack web applications. Through hands-on projects and weekly assignments, you'll master front-end development, back-end architecture, databases, and deployment.</p>"},{"location":"#assignments","title":"\ud83d\udcc2 Assignments","text":""},{"location":"#mongodb","title":"\ud83d\uddc4\ufe0f MongoDB","text":"<ul> <li>Assignment 1</li> <li>Assignment 3</li> </ul>"},{"location":"#frontend-technologies","title":"\ud83c\udf10 Frontend Technologies","text":"<p>\ud83d\udcc2 HTML</p> <ul> <li>\ud83d\udcdc Assignment 2</li> </ul> <p>\ud83d\udcc2 JavaScript</p> <ul> <li>\ud83d\udcdc Counter Project</li> <li>\ud83d\udcdc Dice Game</li> <li>\ud83d\udcdc Currency Converter</li> <li>\ud83d\udcdc Password generator</li> <li>\ud83d\udcdc Guess Number</li> <li>\ud83d\udcdc Assignment 11</li> <li>\ud83d\udcdc Assignment 12 JavaScript OOPS</li> </ul>"},{"location":"#ai","title":"\ud83e\udde0 AI","text":"<p>\ud83e\udd16 OLLMA</p> <ul> <li>\ud83d\udcdc GenAi Assignment 10</li> </ul>"},{"location":"#backendapi","title":"\u2699\ufe0f Backend/Api","text":"<p>\ud83d\udcc2 NODE JS</p> <ul> <li>\ud83d\udcdc Node js Todo List</li> </ul> <ul> <li>\ud83d\udcdc  URL Analyzer</li> </ul> <ul> <li>\ud83d\udcdc  Node HTTP Server Create</li> </ul> <p>\ud83d\udcc2 Bun Js</p> <ul> <li>\ud83d\udcdc Bun Js </li> </ul> <p>\ud83d\udcc2 Express Js</p> <ul> <li>\ud83d\udcdc Express Js </li> <li>\ud83d\udcdc Express Templet Engine </li> </ul>"},{"location":"about/","title":"About This Project","text":""},{"location":"about/#my-3-month-full-stack-development-journey","title":"My 3-Month Full-Stack Development Journey","text":"<p>This project is a documentation of my 3-month journey in Full-Stack Development, guided by my mentor Smaranjit Sir. Throughout this period, I worked on multiple assignments, contributed to various projects, and gained hands-on experience in both frontend and backend technologies.</p>"},{"location":"about/#what-this-documentation-covers","title":"What This Documentation Covers","text":"<p>This MkDocs website serves as a collection of everything I learned and built during these three months, including:</p> <pre><code>\nConcepts Covered: HTML, CSS, JavaScript, React, Node.js, Express, MongoDB, API development, authentication, and deployment.\nAssignments &amp; Projects: Details of various pull requests and contributions made.\nChallenges &amp; Learnings: Key takeaways from different tasks and how I overcame difficulties.\nCode Samples &amp; Best Practices: Important snippets and coding guidelines followed during the journey.\n</code></pre>"},{"location":"about/#my-experience","title":"My Experience","text":"<p>During these three months, I had the opportunity to:</p> <ul> <li>\u2705 Work on real-world projects and improve my problem-solving skills.</li> <li>\u2705 Collaborate on GitHub through multiple pull requests (PRs) and learn version control best practices.</li> <li>\u2705 Follow industry standards in code structuring, API design, and deployment strategies.</li> <li>\u2705 Receive valuable mentorship and feedback from Smaranjit Sir, helping me improve my approach to Full-Stack Development.</li> </ul>"},{"location":"about/#acknowledgment","title":"Acknowledgment","text":"<p>I would like to thank Smaranjit Sir for his guidance, mentorship, and constant support throughout this journey. This experience has significantly enhanced my skills, and I look forward to applying these learnings to future projects. \ud83d\udcbb\ud83d\ude80</p>"},{"location":"assignments/Bun/","title":"Bun Js","text":"<pre>\n<code>\nimport { readFileSync } from \"fs\";\n\nconst about_html = readFileSync(\"./about.html\", \"utf-8\");\n\nconst server = Bun.serve({\n    port:8050,\n    fetch(req){\n        const url = new  URL(req.url)\n        const pathname = url.pathname\n        console.log(url)\n        console.log(pathname)\n\n        switch(pathname){\n        case '/':\n            return new Response('Welcome to BarterX')\n\n        case '/products':\n            return new Response('Here are the products up for Sale in BarterX')\n\n        case '/login':\n            return new Response('Login to the BarterX')\n\n        case '/signup':\n            return new Response('Sign up to the BarterX')\n\n        case '/profile':\n            return new Response('Trader Profile')\n\n        case '/cart':\n            return new Response('Your Shopping Cart is here')\n\n        case '/checkout':\n            return new Response(\"Lets' start shipping\")\n\n        case '/orders':\n            return new Response('Your Orders are here')\n\n        case '/categories':\n            return new Response('Browse Categories')\n\n        case '/chat':\n            return new Response('Your Chat with fellow Traders')\n\n        case '/contact':\n            return new Response('Contact Us at')\n\n        case '/about':\n            return new Response(about_html,{status: 200,headers: {\"Content-Type\": \"text/html\",},})\n\n        case '/api/products':\n            let Product_json = [\n                { \"id\": 1, \"name\": \"Used Laptop\", \"price\": 300 },\n                { \"id\": 2, \"name\": \"Second-hand Bicycle\", \"price\": 50 }\n            ]\n            return  new Response(JSON.stringify(Product_json),{status: 200,headers: {\"Content-Type\": \"application/json\"},})\n\n        default:\n            let error_code = {\n                \"error\": \"Page not found\",\n                \"statusCode\": 404\n            }\n            return new Response(JSON.stringify(error_code),{status: 200, headers: {\"Content-Type\": 'application/json',},})\n\n        }\n    }\n})\n\nconsole.log(`Bun Running on http://localhost:${server.port}`)\n</code>\n</pre> <p>Output: </p>"},{"location":"assignments/assignment1/","title":"Assignment 1","text":"<ol> <li>db.movies.find({runtime:{$gt:150}},{title:1,_id:0},{title:true,_id:false})</li> </ol> <p>db.movies.find({rating:{$gt:8.5}},{title:1,_id:0},{title:true,_id:false})</p> <p>db.movies.find({year:{$gte:2000,$lte:2015}},{title:1,_id:0},{title:true,_id:false})</p> <p>db.movies.find({$or:[{boxOffice:{$lte:500}},{boxOffice:{$gte:1000}}]},{title:1,_id:0},{title:true,_id:false})</p> <ol> <li> <p>db.movies.find({$and:[{director:\"Christopher Nolan\"},{isOscarWinner: true },{boxOffice:{$gt:700}},{streamingOn:\"Netflix\"}]},{title:true,_id:false})</p> </li> <li> <p>db.movies.find({\"specialFeatures.behindTheScenes\":true,\"specialFeatures.deletedScenes\":true},{title:true,_id:false})</p> </li> <li> <p>db.movies.find( { $and : [ {cast: {$in:['Carrie-Anne Moss','Morgan Freeman']} }, {languages:{$exists:true}},{streamingOn:{$exists:true}}, {$expr:{$gte: [{$size:\"$streamingOn\"},2] } } ] },{title:true,_id:false})</p> </li> <li> <p>db.movies.updateOne({title:\"Inception\"}, {$addToSet:{languages:\"Chinese\"}})</p> </li> <li> <p>db.movies.updateMany({director:\"Christopher Nolan\"},{$addToSet:{cast:\"Michael Caine\"}})</p> </li> <li> <p>db.movies.updateMany({runtime:{$gt:140}},{$addToSet:{streamingOn:\"Disney+\"}})</p> </li> <li> <p>db.movies.find({     \"genre\": { $size: 2 },     \"boxOffice\": { $exists: true },     \"specialFeatures\": { $exists: false } })</p> </li> <li> <p>db.movies.deleteMany({ rating: { $lt: 8.0 } })</p> </li> <li> <p>db.movies.updateMany(     { \"year\": { $lt: 2000 } },     { $pull: { \"streamingOn\": \"Netflix\" } } )</p> </li> <li> <p>db.movies.find({$expr:{ $gt: [\"$boxOffice\", { $multiply: [\"$runtime\", 10] }]}},{title:true,_id:false})</p> </li> </ol> <p>12.db.movies.find({     \"streamingOn\": { $all: [\"Netflix\", \"Amazon Prime\"] },     $expr: { $eq: [\"$streamingOn\", [\"Netflix\", \"Amazon Prime\"]] } })</p> <ol> <li> <p>db.movies.find({     \"genre\": { $all: [\"Action\", \"Sci-Fi\"] } })</p> </li> <li> <p>db.movies.find({cast:{$size:3}},{title:true,_id:false}) Footer</p> </li> <li> <p>db.movies.find({     \"cast\": { $size: 3 } })</p> </li> </ol>"},{"location":"assignments/assignment3/","title":"Assignment 3","text":"<p>\ud83d\udcdd Practice Questions \ud83c\udd95 Write a query to insert a new product in the collection with all required fields.</p> <p>\ud83d\udcb0 Find all products with a price less than $100.</p> <p>\ud83d\udd04 Update the stock quantity of \"Wireless Headphones\" to 40.</p> <p>\u274c Delete all products from the \"Gaming\" category.</p> <p>\ud83d\udcca Find all products and sort them by price in descending order.</p> <p>\ud83d\udce6 Find products with stock between 50 and 100 units.</p> <p>\ud83c\udff7\ufe0f Find products that have either \"wireless\" or \"bluetooth\" in their tags.</p> <p>\u2b50 Find products where the average rating is greater than 4.5.</p> <p>\ud83d\udcc5 Find products that were last updated after February 1st, 2024.</p> <p>\ud83d\udd22 Find products with exactly 3 ratings.</p> <p>\ud83d\udd0d Perform a text search to find products related to \"wireless charging\".</p> <p>\ud83d\udcdd Find products that contain the word \"programmable\" in their description.</p> <p>\ud83d\udd0e Search for products containing either \"fitness\" or \"exercise\" in their description.</p> <p>\ud83d\udcd1 Write a query to list all indexes in the products collection.</p> <p>\ud83d\udd11 Create a compound index on price and stock fields.</p> <p>\ud83d\udccb Explain the query plan for finding products by category and sorting by price.</p> <p>\ud83d\udcc8 Find products using the text index and sort by relevance score.</p> <p>\ud83c\udff7\ufe0f Update all products' prices with a 10% discount for items with stock &gt; 100.</p> <p>\u2728 Add a \"featured\" field to all products with an average rating &gt; 4.5.</p> <p>\ud83d\udd0d Find all products in the \"Electronics\" category with a price between $50 and $200.</p> <ol> <li> <p>db.products.insertOne({   \"_id\": 16,   \"name\": \"Smartphone X Pro\",   \"brand\": \"TechElite\",   \"category\": \"Electronics\",   \"price\": 799.99,   \"stock\": 150,   \"ratings\": [4.5, 4.6, 4.8],   \"description\": \"Flagship smartphone with 5G connectivity, 6.5-inch AMOLED display, and 48MP camera\",   \"tags\": [\"smartphone\", \"electronics\", \"5G\", \"camera\"],   \"lastUpdated\": { \"$date\": \"2024-12-13T00:00:00Z\" } });</p> </li> <li> <p>db.products.find({ price: { $lt: 100 } })</p> </li> <li> <p>db.products.updateOne(   { name: \"Wireless Headphones\" },   { $set: { stock: 40 } } )</p> </li> <li> <p>db.products.deleteMany({ category: \"Gaming\" })</p> </li> <li> <p>db.products.find().sort({ price: -1 })</p> </li> <li> <p>db.products.find({ stock: { $gte: 50, $lte: 100 } })</p> </li> <li> <p>db.products.find({ tags: { $in: [\"wireless\", \"bluetooth\"] } })</p> </li> </ol> <p>8   db.products.aggregate([   { $addFields: { averageRating: { $avg: \"$ratings\" } } },   { $match: { averageRating: { $gt: 4.5 } } } ])</p> <ol> <li> <p>db.products.find({ lastUpdated: { $gt: new Date(\"2024-02-01\") } })</p> </li> <li> <p>db.products.find({ ratings: { $size: 3 } })</p> </li> <li> <p>db.products.createIndex({ description: \"text\", tags: \"text\" })     db.products.find({ $text: { $search: \"wireless charging\" } })</p> </li> <li> <p>db.products.find({ description: /programmable/i })</p> </li> <li> <p>db.products.find({ description: { $in: [/fitness/i, /exercise/i] } })</p> </li> <li> <p>db.products.getIndexes()</p> </li> <li> <p>db.products.createIndex({ price: 1, stock: 1 })</p> </li> <li> <p>db.products.find({ category: \"Electronics\" }).sort({ price: -1 }).explain()</p> </li> <li> <p>db.products.find({ $text: { $search: \"wireless\" } }).sort({ score: { $meta: \"textScore\" } })</p> </li> <li> <p>db.products.updateMany(   { stock: { $gt: 100 } },   { $mul: { price: 0.9 } } )</p> </li> <li> <p>db.products.updateMany(   { $expr: { $gt: [{ $avg: \"$ratings\" }, 4.5] } },   { $set: { featured: true } } )</p> </li> <li> <p>db.products.find({   category: \"Electronics\",   price: { $gte: 50, $lte: 200 } }) Footer \u00a9 2</p> </li> </ol>"},{"location":"assignments/Express/ExApi/","title":"Express Js","text":"<pre>\n<code>\nconst express = require('express');\nconst port =  5050\nconst app = express();\nconst rateLimit = require('express-rate-limit');\n\napp.use(express.json())\n\n// const limiter = rateLimit({\n//  windowMs: 15 * 60 * 1000, // 15 minutes\n//  limit: 100, // Limit each IP to 100 requests per window (here, per 15 minutes).\n//  standardHeaders: 'draft-8', // draft-6: RateLimit-* headers; draft-7 &amp; draft-8: combined RateLimit header\n//  legacyHeaders: false, // Disable the X-RateLimit-* headers.\n//  // store: ... , // Redis, Memcached, etc. See below.\n// })\n\n// app.use(limiter)\n\nlet orderList=[\n    { id: 1, product: 'Anti-Aging Serum', quantity: 2 },\n    { id: 2, product: 'Vitamin C Moisturizer', quantity: 1 },\n    { id: 3, product: 'Hyaluronic Acid', quantity: 3 }\n]\n\napp.get(\"/orders/:orderID\", (req, res) =&gt; {\n    const orderID = parseInt(req.params.orderID);\n    if (!orderID) {\n        return res.status(400).send('Invalid Order ID');\n    }\n    let order = orderList.find(x =&gt; x.id === orderID)\n    if (!order) {\n        return res.status(404).send('Order not found');\n    }\n    res.status(200).json({\n        success: true,\n        message: \"Order retrieved successfully\",\n        order: order\n    })\n})\n\napp.post(\"/orders\", (req, res) =&gt; {\n    const { id, product, quantity } = req.body;\n    if (!product || !quantity) {\n        return res.status(400).send('Product and quantity are required');\n    }\n    orderList.push({ id, product, quantity });\n    res.status(201).json({\n        success: true,\n        message: \"Order created successfully\",\n        order: { id, product, quantity }\n    })\n})\n\nlet productList = [\n    { id: 11, name: \"Retinol Serum\", price: 1200, availableQty: 50 },\n    { id: 12, name: \"Niacinamide Solution\", price: 800, availableQty: 30 },\n    { id: 14, name: \"Peptide Moisturizer\", price: 1500, availableQty: 100 },\n    { id: 15, name: \"Glycolic Acid Toner\", price: 900, availableQty: 20 }\n]\n\napp.get('/', (req, res) =&gt; {\n    res.send('Welcome to GlowDerma - Your Skincare Journey Begins Here');\n})\n\napp.get('/about', (req, res) =&gt; {\n    res.send('We are a premium skincare brand committed to bringing you dermatologist-approved, clean beauty products');\n});\n\nconst contactDetails = {\n    \"email\": \"care@glowderma.com\",\n    \"instagram\": \"http://instagram.com/glowderma\",\n    \"consultation\": \"http://glowderma.com/book-appointment\"\n}\n\napp.get('/contact', (req, res) =&gt; {\n    res.send(contactDetails);\n})\n\napp.get('/products', (req, res) =&gt; {\n    const { name, maxPrice } = req.query;\n    if (!name &amp;&amp; !maxPrice) {\n        return res.status(200).json(productList);\n    }\n    let filteredProducts = productList;\n    if (name) {\n        filteredProducts = filteredProducts.filter(product =&gt; product.name === name);\n    }\n    if (maxPrice) {\n        filteredProducts = filteredProducts.filter(product =&gt; product.price &lt;= maxPrice);\n    }\n    return res.status(200).json(filteredProducts);\n})\n\nlet shoppingCart = []\napp.get('/cart', (req, res) =&gt; {\n    res.status(200).json(shoppingCart);\n})\n\napp.post('/cart', (req, res) =&gt; {\n    const { id, name, price } = req.body;\n\n    if (!id || !name || !price) {\n        return res.status(400).json({ \"error\": \"All fields are required\" });\n    }\n    const newItem = { id, name, price };\n    shoppingCart.push(newItem);\n    res.status(201).json(newItem);\n})\n\napp.get('*', (req, res) =&gt; {\n    res.status(404).json({ \"error\": \"Route not found\" })\n})\n\napp.listen(port, () =&gt; {\n    console.log(`Server is running on port ${port}`);\n})\n</code>\n</pre> <p>Output: </p>"},{"location":"assignments/Express/extemp/","title":"Express Template Engine","text":"<pre>\n<code>\nconst express = require('express');\nconst port =  5050\nconst app = express();\nconst rateLimit = require('express-rate-limit');\n\napp.use(express.json())\n\n// const limiter = rateLimit({\n//  windowMs: 15 * 60 * 1000, // 15 minutes\n//  limit: 100, // Limit each IP to 100 requests per window (here, per 15 minutes).\n//  standardHeaders: 'draft-8', // draft-6: RateLimit-* headers; draft-7 &amp; draft-8: combined RateLimit header\n//  legacyHeaders: false, // Disable the X-RateLimit-* headers.\n//  // store: ... , // Redis, Memcached, etc. See below.\n// })\n\n// app.use(limiter)\n\nlet orderList=[\n    { id: 1, product: 'Anti-Aging Serum', quantity: 2 },\n    { id: 2, product: 'Vitamin C Moisturizer', quantity: 1 },\n    { id: 3, product: 'Hyaluronic Acid', quantity: 3 }\n]\n\napp.get(\"/orders/:orderID\", (req, res) =&gt; {\n    const orderID = parseInt(req.params.orderID);\n    if (!orderID) {\n        return res.status(400).send('Invalid Order ID');\n    }\n    let order = orderList.find(x =&gt; x.id === orderID)\n    if (!order) {\n        return res.status(404).send('Order not found');\n    }\n    res.status(200).json({\n        success: true,\n        message: \"Order retrieved successfully\",\n        order: order\n    })\n})\n\napp.post(\"/orders\", (req, res) =&gt; {\n    const { id, product, quantity } = req.body;\n    if (!product || !quantity) {\n        return res.status(400).send('Product and quantity are required');\n    }\n    orderList.push({ id, product, quantity });\n    res.status(201).json({\n        success: true,\n        message: \"Order created successfully\",\n        order: { id, product, quantity }\n    })\n})\n\nlet productList = [\n    { id: 11, name: \"Retinol Serum\", price: 1200, availableQty: 50 },\n    { id: 12, name: \"Niacinamide Solution\", price: 800, availableQty: 30 },\n    { id: 14, name: \"Peptide Moisturizer\", price: 1500, availableQty: 100 },\n    { id: 15, name: \"Glycolic Acid Toner\", price: 900, availableQty: 20 }\n]\n\napp.get('/', (req, res) =&gt; {\n    res.send('Welcome to GlowDerma - Your Skincare Journey Begins Here');\n})\n\napp.get('/about', (req, res) =&gt; {\n    res.send('We are a premium skincare brand committed to bringing you dermatologist-approved, clean beauty products');\n});\n\nconst contactDetails = {\n    \"email\": \"care@glowderma.com\",\n    \"instagram\": \"http://instagram.com/glowderma\",\n    \"consultation\": \"http://glowderma.com/book-appointment\"\n}\n\napp.get('/contact', (req, res) =&gt; {\n    res.send(contactDetails);\n})\n\napp.get('/products', (req, res) =&gt; {\n    const { name, maxPrice } = req.query;\n    if (!name &amp;&amp; !maxPrice) {\n        return res.status(200).json(productList);\n    }\n    let filteredProducts = productList;\n    if (name) {\n        filteredProducts = filteredProducts.filter(product =&gt; product.name === name);\n    }\n    if (maxPrice) {\n        filteredProducts = filteredProducts.filter(product =&gt; product.price &lt;= maxPrice);\n    }\n    return res.status(200).json(filteredProducts);\n})\n\nlet shoppingCart = []\napp.get('/cart', (req, res) =&gt; {\n    res.status(200).json(shoppingCart);\n})\n\napp.post('/cart', (req, res) =&gt; {\n    const { id, name, price } = req.body;\n\n    if (!id || !name || !price) {\n        return res.status(400).json({ \"error\": \"All fields are required\" });\n    }\n    const newItem = { id, name, price };\n    shoppingCart.push(newItem);\n    res.status(201).json(newItem);\n})\n\napp.get('*', (req, res) =&gt; {\n    res.status(404).json({ \"error\": \"Route not found\" })\n})\n\napp.listen(port, () =&gt; {\n    console.log(`Server is running on port ${port}`);\n})\n</code>\n</pre> <p>Output: </p>"},{"location":"assignments/GenAi/GenAi10/","title":"Chatbot application - User can select topic model give answers","text":"<pre>\n<code>\n// import ollama from \"ollama\";\n\n// async function runChat() {\n//   try {\n//     const response = await ollama.chat({\n//       model: \"llama3.2:latest\",\n//       messages: [{ role: 'user', content: \"Generate marketing emails\" }]\n//     });\n\n//     console.log(\"Chatbot Response:\", response.message.content);\n//   } catch (error) {\n//     console.error(\"Error occurred:\", error.message);\n//   }\n// }\n\n// runChat();\n\n//Stage 2:\n\n// import ollama from \"ollama\";\n// import fs from \"fs\";\n\n// let q= fs.readFileSync(\"./q1.txt\", \"utf-8\");\n// console.log(q)\n\n// askQuestion()\n// async function askQuestion() {\n//   try {\n//     const response = await ollama.chat({\n//       model: \"llama3.2:latest\",\n//       messages: [{ role: 'user', content: q }]\n//     });\n\n//     fs.writeFileSync(\"./a1.txt\", response.message.content);\n\n//   } catch (error) {\n//     console.error(\"Error occurred:\", error.message);\n//   }\n// }\n\n// stage 3:\n// import fs from 'fs';\n// import ollama from 'ollama';\n\n// let folder = 'Questions';\n\n// async function runChat(question) {\n//   try {\n//     const response = await ollama.chat({\n//       model: \"llama3.2:1b\",\n//       messages: [{ role: 'user', content: question }]\n//     });\n\n//     return response.message.content;\n//   } catch (error) {\n//     console.error(\"Error occurred:\", error.message);\n//   }\n// }\n\n\n// fs.readdir(folder, (err, files) =&gt; {\n//   if (err) {\n//     return console.error('Error reading directory:', err.message);\n//   }\n\n//   files.forEach((file) =&gt; {\n//     const filepath = `${folder}/${file}`;\n//     fs.readFile(filepath, 'utf8', async (err, question) =&gt; {\n//       if (err) {\n//         return console.error(`Error reading file ${file}:`, err.message);\n//       }\n//       let ans_file = file\n//       const response = await runChat(question);\n//       fs.mkdirSync('Answers', { recursive: true })\n//       let answer_path = `Answers/${ans_file.replace('Q','A')}`\n//       fs.appendFileSync(answer_path, response)\n//     });\n//   });\n// });\n\n\n//stage 4\n\nimport ollama from \"ollama\";\nimport fs from \"fs\";\nlet subDir = process.argv;\ngetQuestion(subDir)\n\n\nasync function getQuestion(subDir) {\n  try{\n      let q=Math.floor(Math.random() * 3) + 1\n      let p=`./input/${subDir[2]}/q${q}.txt`\n      let out=`./output2/${subDir[2]}/q${q}.txt`\n      try{\n        let question=fs.readFileSync(p, \"utf-8\");\n        console.log(question)\n\n        try {\n          const response = await ollama.chat({\n            model: \"qwen2:0.5b\",\n            messages: [{ role: \"user\", content: question }]\n          });\n          const a=response.message.content;\n\n          await fs.writeFileSync(out, a);\n          console.log(`Response written to: ${out}.txt `);\n        } catch (error) {\n          console.error(\"Error :\", error.message);\n        }\n      }\n      catch (error) {\n            console.error(\"Error occurred:\", error.message);\n      }\n  }\n  catch (error) {\n        console.error(\"Error occurred at:\", error.message);\n  }\n}\n</code>\n</pre>"},{"location":"assignments/Node_js/api/","title":"Node JS TODO-LIST","text":"<pre>\n<code>\nconst fs = require('fs');\nconst fileName = 'todos.txt';\n\nif (!fs.existsSync(fileName)) {\n    fs.writeFileSync(fileName, '');\n}\n\nconst args = process.argv.slice(2);\nconst command = args[0];\n\nswitch (command) {\n    case 'add':\n        addTask(args.slice(1).join(' '));\n        break;\n    case 'list':\n        listTasks();\n        break;\n    case 'delete':\n        deleteTask(args[1]);\n        break;\n    case 'mark':\n        markTask(args[1]);\n        break;\n    case 'clear':\n        clearTasks();\n        break;\n    default:\n        showUsage();\n        break;\n}\n\nfunction addTask(task) {\n    if (!task.trim()) {\n        console.log('Error: Task description cannot be empty.');\n        return;\n    }\n    fs.appendFileSync(fileName, task + '\\n');\n    console.log('Todo added!');\n}\n\nfunction listTasks() {\n    const content = fs.readFileSync(fileName, 'utf-8').trim();\n    if (!content) {\n        console.log('No tasks found.');\n        return;\n    }\n    const tasks = content.split('\\n');\n    tasks.forEach((task, index) =&gt; {\n        console.log(`${index + 1}. ${task}`);\n    });\n}\n\nfunction deleteTask(number) {\n    const taskIndex = parseInt(number) - 1;\n    if (isNaN(taskIndex) || taskIndex &lt; 0) {\n        console.log('Error: Invalid task number.');\n        return;\n    }\n    const tasks = fs.readFileSync(fileName, 'utf-8').trim().split('\\n');\n    if (taskIndex &gt;= tasks.length) {\n        console.log('Error: Task number out of range.');\n        return;\n    }\n    tasks.splice(taskIndex, 1);\n    fs.writeFileSync(fileName, tasks.join('\\n') + (tasks.length ? '\\n' : ''));\n    console.log('Todo deleted!');\n}\n\nfunction markTask(number) {\n    const taskIndex = parseInt(number) - 1;\n    if (isNaN(taskIndex) || taskIndex &lt; 0) {\n        console.log('Error: Invalid task number.');\n        return;\n    }\n    const tasks = fs.readFileSync(fileName, 'utf-8').trim().split('\\n');\n    if (taskIndex &gt;= tasks.length) {\n        console.log('Error: Task number out of range.');\n        return;\n    }\n    tasks[taskIndex] += ' [completed]';\n    fs.writeFileSync(fileName, tasks.join('\\n') + '\\n');\n    console.log('Todo marked as completed!');\n}\n\nfunction clearTasks() {\n    fs.writeFileSync(fileName, '');\n    console.log('All tasks cleared!');\n}\n\nfunction showUsage() {\n    console.log(`Usage:\n  node todo.js add       # Add a new task\n  node todo.js list            # Display all tasks\n  node todo.js delete  # Delete a task by its number\n  node todo.js mark    # Mark a task as complete\n  node todo.js clear           # Delete all tasks`);\n}\n\n\n\n<p>Output:\n</p>"},{"location":"assignments/Node_js/http/","title":"Node HTTP SERVER","text":"<pre>\n<code>\nimport http from 'http';\nimport fs from 'fs';\nconst port = 8050;\n\nconst server = http.createServer((req, res) =&gt; {\n    // res.write(req.url);\n    // console.log(req);\n    // fs.writeFileSync('./djj.txt',)\n    fs.appendFileSync('./log.txt',`Get Request from  ${req.url} by ${req.method} Method at ${new Date()}\\n`);\n    let uri=req.url\n    switch (uri) {\n        case '/':\n            res.write(\"Welcome to the BarterX\")\n            break\n        case '/products':  \n            res.write(\"Here are the products up for Sale in BarterX\")\n            break\n        case '/login': \n            res.write( \"Login to the BarterX\")\n            break\n        case '/signup': \n            res.write( \"Sign up to the BarterX\")\n            break\n        case '/profile': \n            res.write( \"Trader Profile\")\n            break\n        case '/cart': \n            res.write( \"Your Shopping Cart is here\")\n            break\n        case '/checkout': \n            res.write( \"Lets' start shipping\")\n            break\n        case '/orders': \n            res.write( \"Your Orders are here\")\n            break\n        case '/categories': \n            res.write( \"Browse Categories\")\n            break\n        case '/chat': \n            res.write( \"Your Chat with fellow Traders\")\n            break\n        case '/contact': \n            res.write( \"Contact Us at\")\n            break\n        case '/about': \n            res.write( \"The modern approach to trading our commodities\")\n            break\n        default: \n            res.write( \"Page not found\")\n            res.write( \"Error 404\")\n            break\n    // Fzor any other page, the server must display a message \"Page not found\"\n    }\n    res.end();\n})\n\nserver.listen(port,() =&gt; {\n    console.log(\"Server initiated on port 8050...\");\n    console.log(\"http://localhost:8050/\");\n})\n</code>\n</pre> <p>Output: </p> <p></p>"},{"location":"assignments/Node_js/nURL/","title":"URL Analyzer","text":"<pre>\n<code>\nconst chalk = require('chalk');\nconst readline = require('readline');\nconst validator = require('validator');\nconst axios = require('axios');\nconst fs = require('fs');\nconst { URL } = require('url');\n\n// Create an interface to read input from the terminal\nconst rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout\n});\n\n// Function to validate, check URL, and store details in a JSON file\nasync function checkUrl(url) {\n    if (validator.isURL(url)) {\n        console.log(chalk.black.bgGreenBright('\u2705 Valid URL'));\n\n        try {\n            // Make an HTTP GET request to check reachability\n            const response = await axios.get(url);\n            console.log(chalk.black.bgGreen(`\u2705 The URL is reachable. Status Code: ${response.status}`));\n\n            // Parse the URL and extract query parameters\n            const parsedUrl = new URL(url);\n            const params = Object.fromEntries(parsedUrl.searchParams.entries());\n\n            let data = { url };\n\n            // Add query parameters if they exist\n            if (Object.keys(params).length &gt; 0) {\n                console.log(chalk.black.bgGreenBright('\u2705 URL contains query parameters:'));\n                Object.entries(params).forEach(([key, value]) =&gt; {\n                    console.log(chalk.black.bgGreen(`   ${key}: ${value}`));\n                });\n                data.params = params;\n            } else {\n                console.log(chalk.black.bgRedBright('\u2139\ufe0f No query parameters found in the URL.'));\n            }\n\n            // Read the existing data from the JSON file\n            let fileData = [];\n            if (fs.existsSync('url-data.json')) {\n                fileData = JSON.parse(fs.readFileSync('url-data.json', 'utf8'));\n            }\n\n            // Append the new data to the existing array\n            fileData.push(data);\n\n            // Write the updated array back to the file\n            fs.writeFileSync('url-data.json', JSON.stringify(fileData, null, 4));\n            console.log(chalk.black.bgGreenBright('\u2705 Data appended to url-data.json'));\n        } catch (error) {\n            console.log(chalk.black.bgRedBright('\u274c The URL is unreachable or blocked.'));\n        }\n    } else {\n        console.log(chalk.black.bgRedBright('\u274c Invalid URL'));\n    }\n\n    // Close the input stream\n    rl.close();\n}\n\n// Prompt the user to enter a URL\nrl.question('Please enter a URL: ', (url) =&gt; {\n    checkUrl(url);\n});\n</code>\n</pre> <p>Output: </p>"},{"location":"assignments/html/assignment2/","title":"\ud83d\udcdd Assignment 2 - HTML Questions","text":""},{"location":"assignments/html/assignment2/#question-1","title":"\ud83d\udd39 Question 1","text":"<p>View Code Output: </p>"},{"location":"assignments/html/assignment2/#question-2","title":"\ud83d\udd39 Question 2","text":"<p>View Code Output: </p>"},{"location":"assignments/html/assignment2/#question-3","title":"\ud83d\udd39 Question 3","text":"<p>View Code Output: </p>"},{"location":"assignments/html/assignment2/#question-4","title":"\ud83d\udd39 Question 4","text":"<p>View Code Output: </p>"},{"location":"assignments/html/assignment2/#question-5","title":"\ud83d\udd39 Question 5","text":"<p>View Code Output: </p>"},{"location":"assignments/javascript/Assignment11/","title":"Assignment 11","text":"<pre>\n<code>\n// \ud83d\udcdd Assignment Function Assignment 11 - JavaScript Questions\n\n// Task 1: Using Array Methods\n// Write a function squareNumbers(arr) using map() and arrow functions\n\nfunction squareNumbers(input) {\n    return input.map((num) =&gt; num * num);\n}\n\ninput = [1, 2, 3, 4, 5];\nconsole.log(squareNumbers(input));\n\n// Task 2: Custom Filter Function\n// Create a function filterEvenNumbers(arr) using filter() and arrow functions\n\nfunction filterEvenNumbers(arr){\n    return arr.filter((num) =&gt; num % 2 === 0);\n}\n\ninput = [1, 2, 3, 4, 5];\nconsole.log(filterEvenNumbers(input));\n\n// Task 3: Sum of Positive Numbers\n// Write a function sumPositiveNumbers(arr) that takes an array of numbers and returns the sum of all positive numbers using filter() and reduce() with arrow functions\n\nfunction sumPositiveNumbers(arr){\n    return arr.filter((num) =&gt; num &gt; 0).reduce((acc, num) =&gt; acc + num, 0);\n}\n\ninput = [1, 2, 3, -4, 5];\nconsole.log(sumPositiveNumbers(input));\n\n// Task 4: Transform Array of Objects\n// Write a function getNames(arr) that takes an array of objects where each object has a name property, and returns an array of just the names using map() and arrow functions\n\nfunction getNames(arr){\n    return arr.map((obj) =&gt; obj.name);\n}\n\ninput = [{name: 'John'}, {name: 'Jane'}, {name: 'Jack'}];\nconsole.log(getNames(input));\n\n// Task 5: Find the Longest Word\n// Write a function findLongestWord(arr) that takes an array of strings and returns the longest word using reduce() and an arrow function\n\nfunction findLongestWord(arr){   \n    return arr.reduce((acc, word) =&gt; word.length &gt; acc.length ? word : acc, '');\n}\n\ninput = ['apple', 'banana', 'cherry', 'date', 'elderberry'];\nconsole.log(findLongestWord(input));\n</code>\n</pre>"},{"location":"assignments/javascript/Assignment12/","title":"Assignment 12 JavaScript OPS","text":"<pre>\n<code>\n// Prototypes and Object-Oriented Programming\n\n// Task 1: \n\nfunction Animal() {\n    this.speak = function() {\n      return 'Animal speaking';\n    }\n}\n\nfunction Dog() {\n    Animal.call(this);\n    this.bark = function() {\n      return 'Woof!';\n    }\n}\n\nlet myDog = new Dog();\n\nconsole.log(myDog.speak());\nconsole.log(myDog.bark());\n\nconsole.log(myDog instanceof Dog);\nconsole.log(myDog instanceof Animal);\n\n// Task 2:\n\nfunction Person(name, age) {\n    if (age &lt;= 0 || isNaN(age)) {\n      throw new Error(\"Age must be a positive number\");\n    }\n\n    this.name = name;\n    this.age = age;\n\n    this.greet = function() {\n      return `Hello, my name is ${this.name}`;\n    }\n}\n\n// Task 3:\n\nclass Vehicle {\n    constructor(make, model) {\n      this.make = make;\n      this.model = model;\n    }\n\n    getDetails() {\n      return `Make: ${this.make}, Model: ${this.model}`;\n    }\n\n    move() {\n      return \"The vehicle is moving\";\n    }\n\n    static isVehicle(obj) {\n      return obj instanceof Vehicle;\n    }\n}\n\nclass Car extends Vehicle {\n    constructor(make, model) {\n      super(make, model);\n    }\n\n    startEngine() {\n      return \"Engine started\";\n    }\n\n    move() {\n      return \"The car is driving\";\n    }\n}\n\nlet car = new Car(\"Toyota\", \"Corolla\");\nconsole.log(car.getDetails());\nconsole.log(car.startEngine());\nconsole.log(car.move());\n\nlet vehicle = new Vehicle(\"Ford\", \"Fusion\");\nconsole.log(vehicle.getDetails());\nconsole.log(vehicle.move());\n\nconsole.log(Vehicle.isVehicle(car));\nconsole.log(Vehicle.isVehicle(vehicle));\nconsole.log(Vehicle.isVehicle({}));\n\n// Task 4:\n\n// i) Encapsulation Using Getters and Setters\n\nclass BankAccount {\n    #balance;\n\n    constructor(initialBalance = 0) {\n      this.#balance = initialBalance;\n    }\n\n    get balance() {\n      return this.#balance;\n    }\n\n    deposit(amount) {\n      if (amount &gt; 0) this.#balance += amount;\n    }\n\n    withdraw(amount) {\n      if (amount &gt; 0 &amp;&amp; this.#balance &gt;= amount) this.#balance -= amount;\n    }\n}\n\nlet account = new BankAccount(100);\naccount.deposit(50);\naccount.withdraw(30);\nconsole.log(account.balance);\n\n// ii) Polymorphism with Method Overriding\n\nclass Shape {\n    area() {\n      return 0;\n    }\n}\n\nclass Circle extends Shape {\n    constructor(radius) {\n      super();\n      this.radius = radius;\n    }\n\n    area() {\n      return Math.PI * this.radius ** 2;\n    }\n}\n\nclass Rectangle extends Shape {\n    constructor(length, width) {\n      super();\n      this.length = length;\n      this.width = width;\n    }\n\n    area() {\n      return this.length * this.width;\n    }\n}\n\nlet circle = new Circle(5);\nconsole.log(circle.area());\n\nlet rectangle = new Rectangle(10, 5);\nconsole.log(rectangle.area());\n</code>\n</pre>"},{"location":"assignments/javascript/Counter/","title":"\ud83d\udcdd Assignment Counter Project - JavaScript Questions","text":"<p>View Code View Output</p> <p>Output: </p>"},{"location":"assignments/javascript/Currency_converter/","title":"\ud83d\udcdd Assignment Currency convertor Project - JavaScript Questions","text":"<p>View Code View Output</p> <p>Output: </p>"},{"location":"assignments/javascript/Dice_Game/","title":"\ud83d\udcdd Assignment Dice Project - JavaScript Questions","text":"<p>View Code View Output</p> <p>Output: </p>"},{"location":"assignments/javascript/GussE_Number/","title":"\ud83d\udcdd Assignment Guss Number Project - JavaScript Questions","text":"<p>View Code View Output</p> <p>Output: </p>"},{"location":"assignments/javascript/Password/","title":"\ud83d\udcdd Assignment Password Project - JavaScript Questions","text":"<p>View Code View Output</p> <p>Output: </p>"}]}